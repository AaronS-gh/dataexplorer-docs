### YamlMime:FAQ
metadata:
  title: Azure Data Explorer ingestion FAQ 
  description: "Get answers to common questions about Azure Data Explorer ingestion."
  ms.date: 02/13/2022
  ms.topic: faq
title: Common questions about Azure Data Explorer ingestion
summary: This article answers commonly asked questions about Azure Data Explorer ingestion.
sections: 
  - name: Batching and data latencies
    questions:
      - question: How does batching affect my data?
        answer: |
          The batching manager buffers and batches ingress data based on the ingestion settings in the [ingestion batching policy](batchingpolicy.md). The ingestion batching policy sets batch limits according to three limiting factors, whichever is first reached: time elapsed since batch creation, accumulated number of items (blobs), or total batch size. The default batching settings are 5 minutes / 1 GB / 1000 blobs, meaning there will be at least a 5-minute delay when queueing a sample data for ingestion.
      - question: Should I use batching or streaming ingestion?
        answer: |
          Batching ingestion is optimized for high ingestion throughput, and is the preferred and most performant type of ingestion. 
          In contrast, streaming ingestion is optimized for low ingestion latency. 
          Learn more about [batching versus streaming ingestion](../../ingest-data-overview.md#batching-vs-streaming-ingestion).
      - question: Do I need to change the batching policy?
        answer: |
          If default settings for the [ingestion batching policy](batchingpolicy.md) do not suit your needs, you can try lowering the batching policy `time`. 
          See also [ingestion best practices - optimizing for throughput](../api/netfx/kusto-ingest-best-practices.md#optimizing-for-throughput).
          You should also update settings when you scale up ingestion. 
          When you change batching policy settings, it can take up to 5-minutes to take effect. 
      - question: What causes batching ingestion latency?
        answer: |
          Ingestion latency can result from the [ingestion batching policy](batchingpolicy.md) settings, or a data backlog buildup. To address this, adjust the [batching policy settings](batchingpolicy.md).
          Latencies that are part of the ingestion process can be [monitored](../../monitor-batching-ingestion.md).      
      - question: Where can I view batching latency metrics?
        answer: |
          To view ingestion latency metrics, see [monitoring ingestion latency](../../monitor-batching-ingestion.md#view-the-ingestion-latency). The metrics `Stage Latency` and `Discovery Latency` show latencies in the ingestion process, and reveal if there are any long latencies.
      - question: How can I shorten batching latencies? 
        answer: |
          You can [learn about latencies](batchingpolicy.md#batching-latencies) and [adjust settings in the batching policy](batchingpolicy.md) to address issues that cause latencies such as data backlogs, inefficient batching, batching large amounts of uncompressed data, or ingesting very small amounts of data. 
      - question: How is batching data size calculated? 
        answer: |
          The batching policy data size is set for uncompressed data. When ingesting compressed data, the uncompressed [data size is calculated](batchingpolicy.md#batch-data-size) from ingestion batching parameters, zip files metadata, or factor over the compressed file size.
  - name: Ingestion monitoring, metrics, and errors
    questions: 
      - question: How can I monitor ingestion issues?
        answer: |
          You can monitor ingestion [using metrics](../../using-metrics.md#ingestion-metrics), and by [setting up and using ingestion diagnostic logs](../../using-diagnostic-logs.md) for detailed table-level monitoring, viewing detailed ingestion error codes, and so on. 
          You can select specific metrics to track, choose how to aggregate your results, and create metric charts to view on your dashboard. See more about [streaming metrics](../../using-metrics.md#streaming-ingest-metrics) and [how to monitor batching ingestion](../../monitor-batching-ingestion.md).
      - question: Where can I view insights about ingestion?
        answer: |
          You can use the portal's [Azure Monitor Insights](/azure/azure-monitor/app/app-insights-overview) to help you understand how Azure Data Explorer is performing and how it's being used.
          The Insight view is based on [metrics](../../using-metrics.md) and [diagnostic logs](../../using-diagnostic-logs.md) that can be streamed to a Log Analytics workspace. 
          Use the [.dup-next-ingest](dup-next-ingest.md) command to duplicate the next ingestion into a storage container and review the details and metadata of the ingestion.
      - question: Where do I check ingestion errors?
        answer: |
          The full ingestion process can be monitored using ingestion [metrics](../../using-metrics.md) and [diagnostic logs](../../using-diagnostic-logs.md). 
          Ingestion failures can be monitored using the `IngestionResult` metric or the `FailedIngestion` diagnostic log.
          The [`.show ingestion failures`](ingestionfailures.md) command shows ingestion failures that occur specifically in the Kusto Data Engine, and is not recommended for monitoring errors. 
          The [`.dup-next-failed-ingest`](dup-next-failed-ingest.md) command provides information on the next failed ingestion by uploading ingestion files and metadata to a storage container. 
          This can be useful for checking an ingestion flow, though is not advised for steady monitoring.
      - question: What can I do if I find many retry errors?
        answer: |
          [Metrics](../../using-metrics.md) that include the `RetryAttemptsExceeded` metric status many times indicate that ingestion exceeded the retry attempt limit or time-span limit following a recurring transient error. 
          If this error also appears in the diagnostic log with [error code](../../error-codes.md) `General_RetryAttemptsExceeded` and the details "Failed to access storage and get information for the blob," this indicates a high load storage access issue.
          During Event Grid ingestion, Azure Data Explorer requests blob details from the storage account.
          When the load is too high on a storage account, storage access may fail, and information needed for ingestion cannot be retrieved.
          If attempts pass the maximum amount of retries defined, Azure Data Explorer stops trying to ingest the failed blob.
          To prevent a load issue, use a premium storage account or divide the ingested data over more storage accounts.
          To discover related errors, check the `FailedIngestion` diagnostic logs for error codes and for the paths of any failed blobs.
  - name: Ingesting historical data
    questions:
      - question: How can I ingest large amounts of historical data and ensure good performance?
        answer: |
          To efficiently ingest large quantities of historical data, use [LightIngest](../../lightingest.md). 
          For ease of use, try the LightIngest [wizard](../../generate-lightingest-command.md). 
          To improve performance for many small files, adjust the [batching policy](batchingpolicy.md), change batching conditions and address [latencies](batchingpolicy.md#batching-latencies). 
          Use the batching policy [wizard](../../table-batching-policy-wizard.md) to quickly change policy settings. 
          To improve ingestion performance when ingesting extremely large data files, use [Azure Data Factory](/azure/data-factory/) (ADF), a cloud-based data integration service. 
  - name: Ingesting invalid data
    questions:
      - question: What happens when invalid data is ingested?
        answer: |
          Malformed data, unparsable, too large or not conforming to schema, might fail to be ingested properly. For more information, see [Ingestion of invalid data](../../ingest-invalid-data.md). 
  - name: SDKs and connectors
    questions:     
      - question: How can I improve ingestion with SDKs?
        answer: |
          When ingesting via SDK, you can use the ingestion [batching policy settings to improve performance](../../net-sdk-ingest-data.md). 
          Try incrementally decreasing the size of data ingested in the table or database batching policy down towards 250 MB and check if there is an improvement.
      - question: How can I tune Kusto Kafka Sink for better ingestion performance?
        answer: |
          [Kafka Sink](https://github.com/Azure/kafka-sink-azure-kusto/blob/master/README.md) users should [tune the connector](../../ingest-data-kafka.md) to work together with the [ingestion batching policy](batchingpolicy.md) by tuning batching time, size, and item number.